// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeVirtualClusterInstances implements VirtualClusterInstanceInterface
type fakeVirtualClusterInstances struct {
	*gentype.FakeClientWithList[*v1.VirtualClusterInstance, *v1.VirtualClusterInstanceList]
	Fake *FakeManagementV1
}

func newFakeVirtualClusterInstances(fake *FakeManagementV1, namespace string) managementv1.VirtualClusterInstanceInterface {
	return &fakeVirtualClusterInstances{
		gentype.NewFakeClientWithList[*v1.VirtualClusterInstance, *v1.VirtualClusterInstanceList](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("virtualclusterinstances"),
			v1.SchemeGroupVersion.WithKind("VirtualClusterInstance"),
			func() *v1.VirtualClusterInstance { return &v1.VirtualClusterInstance{} },
			func() *v1.VirtualClusterInstanceList { return &v1.VirtualClusterInstanceList{} },
			func(dst, src *v1.VirtualClusterInstanceList) { dst.ListMeta = src.ListMeta },
			func(list *v1.VirtualClusterInstanceList) []*v1.VirtualClusterInstance {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.VirtualClusterInstanceList, items []*v1.VirtualClusterInstance) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetKubeConfig takes the representation of a virtualClusterInstanceKubeConfig and creates it.  Returns the server's representation of the virtualClusterInstanceKubeConfig, and an error, if there is any.
func (c *fakeVirtualClusterInstances) GetKubeConfig(ctx context.Context, virtualClusterInstanceName string, virtualClusterInstanceKubeConfig *v1.VirtualClusterInstanceKubeConfig, opts metav1.CreateOptions) (result *v1.VirtualClusterInstanceKubeConfig, err error) {
	emptyResult := &v1.VirtualClusterInstanceKubeConfig{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), virtualClusterInstanceName, "kubeconfig", c.Namespace(), virtualClusterInstanceKubeConfig, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.VirtualClusterInstanceKubeConfig), err
}

// GetAccessKey takes name of the virtualClusterInstance, and returns the corresponding virtualClusterAccessKey object, and an error if there is any.
func (c *fakeVirtualClusterInstances) GetAccessKey(ctx context.Context, virtualClusterInstanceName string, options metav1.GetOptions) (result *v1.VirtualClusterAccessKey, err error) {
	emptyResult := &v1.VirtualClusterAccessKey{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "accesskey", virtualClusterInstanceName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.VirtualClusterAccessKey), err
}

// GetExternalDatabase takes the representation of a virtualClusterExternalDatabase and creates it.  Returns the server's representation of the virtualClusterExternalDatabase, and an error, if there is any.
func (c *fakeVirtualClusterInstances) GetExternalDatabase(ctx context.Context, virtualClusterInstanceName string, virtualClusterExternalDatabase *v1.VirtualClusterExternalDatabase, opts metav1.CreateOptions) (result *v1.VirtualClusterExternalDatabase, err error) {
	emptyResult := &v1.VirtualClusterExternalDatabase{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), virtualClusterInstanceName, "externaldatabase", c.Namespace(), virtualClusterExternalDatabase, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.VirtualClusterExternalDatabase), err
}
