// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeTeams implements TeamInterface
type fakeTeams struct {
	*gentype.FakeClientWithList[*v1.Team, *v1.TeamList]
	Fake *FakeManagementV1
}

func newFakeTeams(fake *FakeManagementV1) managementv1.TeamInterface {
	return &fakeTeams{
		gentype.NewFakeClientWithList[*v1.Team, *v1.TeamList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("teams"),
			v1.SchemeGroupVersion.WithKind("Team"),
			func() *v1.Team { return &v1.Team{} },
			func() *v1.TeamList { return &v1.TeamList{} },
			func(dst, src *v1.TeamList) { dst.ListMeta = src.ListMeta },
			func(list *v1.TeamList) []*v1.Team { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.TeamList, items []*v1.Team) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// ListClusters takes name of the team, and returns the corresponding teamClusters object, and an error if there is any.
func (c *fakeTeams) ListClusters(ctx context.Context, teamName string, options metav1.GetOptions) (result *v1.TeamClusters, err error) {
	emptyResult := &v1.TeamClusters{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "clusters", teamName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.TeamClusters), err
}

// ListAccessKeys takes name of the team, and returns the corresponding teamAccessKeys object, and an error if there is any.
func (c *fakeTeams) ListAccessKeys(ctx context.Context, teamName string, options metav1.GetOptions) (result *v1.TeamAccessKeys, err error) {
	emptyResult := &v1.TeamAccessKeys{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "accesskeys", teamName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.TeamAccessKeys), err
}
