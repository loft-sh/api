// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDevPodWorkspacePresets implements DevPodWorkspacePresetInterface
type FakeDevPodWorkspacePresets struct {
	Fake *FakeManagementV1
}

var devpodworkspacepresetsResource = v1.SchemeGroupVersion.WithResource("devpodworkspacepresets")

var devpodworkspacepresetsKind = v1.SchemeGroupVersion.WithKind("DevPodWorkspacePreset")

// Get takes name of the devPodWorkspacePreset, and returns the corresponding devPodWorkspacePreset object, and an error if there is any.
func (c *FakeDevPodWorkspacePresets) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.DevPodWorkspacePreset, err error) {
	emptyResult := &v1.DevPodWorkspacePreset{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetActionWithOptions(devpodworkspacepresetsResource, name, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspacePreset), err
}

// List takes label and field selectors, and returns the list of DevPodWorkspacePresets that match those selectors.
func (c *FakeDevPodWorkspacePresets) List(ctx context.Context, opts metav1.ListOptions) (result *v1.DevPodWorkspacePresetList, err error) {
	emptyResult := &v1.DevPodWorkspacePresetList{}
	obj, err := c.Fake.
		Invokes(testing.NewRootListActionWithOptions(devpodworkspacepresetsResource, devpodworkspacepresetsKind, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.DevPodWorkspacePresetList{ListMeta: obj.(*v1.DevPodWorkspacePresetList).ListMeta}
	for _, item := range obj.(*v1.DevPodWorkspacePresetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested devPodWorkspacePresets.
func (c *FakeDevPodWorkspacePresets) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchActionWithOptions(devpodworkspacepresetsResource, opts))
}

// Create takes the representation of a devPodWorkspacePreset and creates it.  Returns the server's representation of the devPodWorkspacePreset, and an error, if there is any.
func (c *FakeDevPodWorkspacePresets) Create(ctx context.Context, devPodWorkspacePreset *v1.DevPodWorkspacePreset, opts metav1.CreateOptions) (result *v1.DevPodWorkspacePreset, err error) {
	emptyResult := &v1.DevPodWorkspacePreset{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(devpodworkspacepresetsResource, devPodWorkspacePreset, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspacePreset), err
}

// Update takes the representation of a devPodWorkspacePreset and updates it. Returns the server's representation of the devPodWorkspacePreset, and an error, if there is any.
func (c *FakeDevPodWorkspacePresets) Update(ctx context.Context, devPodWorkspacePreset *v1.DevPodWorkspacePreset, opts metav1.UpdateOptions) (result *v1.DevPodWorkspacePreset, err error) {
	emptyResult := &v1.DevPodWorkspacePreset{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateActionWithOptions(devpodworkspacepresetsResource, devPodWorkspacePreset, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspacePreset), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDevPodWorkspacePresets) UpdateStatus(ctx context.Context, devPodWorkspacePreset *v1.DevPodWorkspacePreset, opts metav1.UpdateOptions) (result *v1.DevPodWorkspacePreset, err error) {
	emptyResult := &v1.DevPodWorkspacePreset{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceActionWithOptions(devpodworkspacepresetsResource, "status", devPodWorkspacePreset, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspacePreset), err
}

// Delete takes name of the devPodWorkspacePreset and deletes it. Returns an error if one occurs.
func (c *FakeDevPodWorkspacePresets) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(devpodworkspacepresetsResource, name, opts), &v1.DevPodWorkspacePreset{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDevPodWorkspacePresets) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionActionWithOptions(devpodworkspacepresetsResource, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1.DevPodWorkspacePresetList{})
	return err
}

// Patch applies the patch and returns the patched devPodWorkspacePreset.
func (c *FakeDevPodWorkspacePresets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.DevPodWorkspacePreset, err error) {
	emptyResult := &v1.DevPodWorkspacePreset{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(devpodworkspacepresetsResource, name, pt, data, opts, subresources...), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspacePreset), err
}
