// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeUsers implements UserInterface
type fakeUsers struct {
	*gentype.FakeClientWithList[*v1.User, *v1.UserList]
	Fake *FakeManagementV1
}

func newFakeUsers(fake *FakeManagementV1) managementv1.UserInterface {
	return &fakeUsers{
		gentype.NewFakeClientWithList[*v1.User, *v1.UserList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("users"),
			v1.SchemeGroupVersion.WithKind("User"),
			func() *v1.User { return &v1.User{} },
			func() *v1.UserList { return &v1.UserList{} },
			func(dst, src *v1.UserList) { dst.ListMeta = src.ListMeta },
			func(list *v1.UserList) []*v1.User { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.UserList, items []*v1.User) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// GetProfile takes name of the user, and returns the corresponding userProfile object, and an error if there is any.
func (c *fakeUsers) GetProfile(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserProfile, err error) {
	emptyResult := &v1.UserProfile{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "profile", userName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.UserProfile), err
}

// ListClusters takes name of the user, and returns the corresponding userClusters object, and an error if there is any.
func (c *fakeUsers) ListClusters(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserClusters, err error) {
	emptyResult := &v1.UserClusters{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "clusters", userName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.UserClusters), err
}

// ListAccessKeys takes name of the user, and returns the corresponding userAccessKeys object, and an error if there is any.
func (c *fakeUsers) ListAccessKeys(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserAccessKeys, err error) {
	emptyResult := &v1.UserAccessKeys{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "accesskeys", userName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.UserAccessKeys), err
}
