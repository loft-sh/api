// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeRunners implements RunnerInterface
type fakeRunners struct {
	*gentype.FakeClientWithList[*v1.Runner, *v1.RunnerList]
	Fake *FakeManagementV1
}

func newFakeRunners(fake *FakeManagementV1) managementv1.RunnerInterface {
	return &fakeRunners{
		gentype.NewFakeClientWithList[*v1.Runner, *v1.RunnerList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("runners"),
			v1.SchemeGroupVersion.WithKind("Runner"),
			func() *v1.Runner { return &v1.Runner{} },
			func() *v1.RunnerList { return &v1.RunnerList{} },
			func(dst, src *v1.RunnerList) { dst.ListMeta = src.ListMeta },
			func(list *v1.RunnerList) []*v1.Runner { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.RunnerList, items []*v1.Runner) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// GetConfig takes name of the runner, and returns the corresponding runnerConfig object, and an error if there is any.
func (c *fakeRunners) GetConfig(ctx context.Context, runnerName string, options metav1.GetOptions) (result *v1.RunnerConfig, err error) {
	emptyResult := &v1.RunnerConfig{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "config", runnerName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.RunnerConfig), err
}

// GetAccessKey takes name of the runner, and returns the corresponding runnerAccessKey object, and an error if there is any.
func (c *fakeRunners) GetAccessKey(ctx context.Context, runnerName string, options metav1.GetOptions) (result *v1.RunnerAccessKey, err error) {
	emptyResult := &v1.RunnerAccessKey{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "accesskey", runnerName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.RunnerAccessKey), err
}
