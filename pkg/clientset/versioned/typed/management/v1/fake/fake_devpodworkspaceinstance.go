// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeDevPodWorkspaceInstances implements DevPodWorkspaceInstanceInterface
type fakeDevPodWorkspaceInstances struct {
	*gentype.FakeClientWithList[*v1.DevPodWorkspaceInstance, *v1.DevPodWorkspaceInstanceList]
	Fake *FakeManagementV1
}

func newFakeDevPodWorkspaceInstances(fake *FakeManagementV1, namespace string) managementv1.DevPodWorkspaceInstanceInterface {
	return &fakeDevPodWorkspaceInstances{
		gentype.NewFakeClientWithList[*v1.DevPodWorkspaceInstance, *v1.DevPodWorkspaceInstanceList](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("devpodworkspaceinstances"),
			v1.SchemeGroupVersion.WithKind("DevPodWorkspaceInstance"),
			func() *v1.DevPodWorkspaceInstance { return &v1.DevPodWorkspaceInstance{} },
			func() *v1.DevPodWorkspaceInstanceList { return &v1.DevPodWorkspaceInstanceList{} },
			func(dst, src *v1.DevPodWorkspaceInstanceList) { dst.ListMeta = src.ListMeta },
			func(list *v1.DevPodWorkspaceInstanceList) []*v1.DevPodWorkspaceInstance {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.DevPodWorkspaceInstanceList, items []*v1.DevPodWorkspaceInstance) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// Up takes the representation of a devPodWorkspaceInstanceUp and creates it.  Returns the server's representation of the devPodWorkspaceInstanceUp, and an error, if there is any.
func (c *fakeDevPodWorkspaceInstances) Up(ctx context.Context, devPodWorkspaceInstanceName string, devPodWorkspaceInstanceUp *v1.DevPodWorkspaceInstanceUp, opts metav1.CreateOptions) (result *v1.DevPodWorkspaceInstanceUp, err error) {
	emptyResult := &v1.DevPodWorkspaceInstanceUp{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), devPodWorkspaceInstanceName, "up", c.Namespace(), devPodWorkspaceInstanceUp, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspaceInstanceUp), err
}

// Stop takes the representation of a devPodWorkspaceInstanceStop and creates it.  Returns the server's representation of the devPodWorkspaceInstanceStop, and an error, if there is any.
func (c *fakeDevPodWorkspaceInstances) Stop(ctx context.Context, devPodWorkspaceInstanceName string, devPodWorkspaceInstanceStop *v1.DevPodWorkspaceInstanceStop, opts metav1.CreateOptions) (result *v1.DevPodWorkspaceInstanceStop, err error) {
	emptyResult := &v1.DevPodWorkspaceInstanceStop{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), devPodWorkspaceInstanceName, "stop", c.Namespace(), devPodWorkspaceInstanceStop, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspaceInstanceStop), err
}

// Troubleshoot takes name of the devPodWorkspaceInstance, and returns the corresponding devPodWorkspaceInstanceTroubleshoot object, and an error if there is any.
func (c *fakeDevPodWorkspaceInstances) Troubleshoot(ctx context.Context, devPodWorkspaceInstanceName string, options metav1.GetOptions) (result *v1.DevPodWorkspaceInstanceTroubleshoot, err error) {
	emptyResult := &v1.DevPodWorkspaceInstanceTroubleshoot{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "troubleshoot", devPodWorkspaceInstanceName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspaceInstanceTroubleshoot), err
}

// Cancel takes the representation of a devPodWorkspaceInstanceCancel and creates it.  Returns the server's representation of the devPodWorkspaceInstanceCancel, and an error, if there is any.
func (c *fakeDevPodWorkspaceInstances) Cancel(ctx context.Context, devPodWorkspaceInstanceName string, devPodWorkspaceInstanceCancel *v1.DevPodWorkspaceInstanceCancel, opts metav1.CreateOptions) (result *v1.DevPodWorkspaceInstanceCancel, err error) {
	emptyResult := &v1.DevPodWorkspaceInstanceCancel{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), devPodWorkspaceInstanceName, "cancel", c.Namespace(), devPodWorkspaceInstanceCancel, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevPodWorkspaceInstanceCancel), err
}
