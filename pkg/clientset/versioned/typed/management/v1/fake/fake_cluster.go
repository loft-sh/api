// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeClusters implements ClusterInterface
type fakeClusters struct {
	*gentype.FakeClientWithList[*v1.Cluster, *v1.ClusterList]
	Fake *FakeManagementV1
}

func newFakeClusters(fake *FakeManagementV1) managementv1.ClusterInterface {
	return &fakeClusters{
		gentype.NewFakeClientWithList[*v1.Cluster, *v1.ClusterList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("clusters"),
			v1.SchemeGroupVersion.WithKind("Cluster"),
			func() *v1.Cluster { return &v1.Cluster{} },
			func() *v1.ClusterList { return &v1.ClusterList{} },
			func(dst, src *v1.ClusterList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ClusterList) []*v1.Cluster { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ClusterList, items []*v1.Cluster) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// ListAccess takes name of the cluster, and returns the corresponding clusterMemberAccess object, and an error if there is any.
func (c *fakeClusters) ListAccess(ctx context.Context, clusterName string, options metav1.GetOptions) (result *v1.ClusterMemberAccess, err error) {
	emptyResult := &v1.ClusterMemberAccess{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "memberaccess", clusterName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ClusterMemberAccess), err
}

// ListMembers takes name of the cluster, and returns the corresponding clusterMembers object, and an error if there is any.
func (c *fakeClusters) ListMembers(ctx context.Context, clusterName string, options metav1.GetOptions) (result *v1.ClusterMembers, err error) {
	emptyResult := &v1.ClusterMembers{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "members", clusterName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ClusterMembers), err
}

// ListVirtualClusterDefaults takes name of the cluster, and returns the corresponding clusterVirtualClusterDefaults object, and an error if there is any.
func (c *fakeClusters) ListVirtualClusterDefaults(ctx context.Context, clusterName string, options metav1.GetOptions) (result *v1.ClusterVirtualClusterDefaults, err error) {
	emptyResult := &v1.ClusterVirtualClusterDefaults{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "virtualclusterdefaults", clusterName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ClusterVirtualClusterDefaults), err
}

// GetAgentConfig takes name of the cluster, and returns the corresponding clusterAgentConfig object, and an error if there is any.
func (c *fakeClusters) GetAgentConfig(ctx context.Context, clusterName string, options metav1.GetOptions) (result *v1.ClusterAgentConfig, err error) {
	emptyResult := &v1.ClusterAgentConfig{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "agentconfig", clusterName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ClusterAgentConfig), err
}

// GetAccessKey takes name of the cluster, and returns the corresponding clusterAccessKey object, and an error if there is any.
func (c *fakeClusters) GetAccessKey(ctx context.Context, clusterName string, options metav1.GetOptions) (result *v1.ClusterAccessKey, err error) {
	emptyResult := &v1.ClusterAccessKey{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "accesskey", clusterName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ClusterAccessKey), err
}
