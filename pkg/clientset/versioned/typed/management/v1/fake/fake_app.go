// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeApps implements AppInterface
type fakeApps struct {
	*gentype.FakeClientWithList[*v1.App, *v1.AppList]
	Fake *FakeManagementV1
}

func newFakeApps(fake *FakeManagementV1) managementv1.AppInterface {
	return &fakeApps{
		gentype.NewFakeClientWithList[*v1.App, *v1.AppList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("apps"),
			v1.SchemeGroupVersion.WithKind("App"),
			func() *v1.App { return &v1.App{} },
			func() *v1.AppList { return &v1.AppList{} },
			func(dst, src *v1.AppList) { dst.ListMeta = src.ListMeta },
			func(list *v1.AppList) []*v1.App { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.AppList, items []*v1.App) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// GetCredentials takes name of the app, and returns the corresponding appCredentials object, and an error if there is any.
func (c *fakeApps) GetCredentials(ctx context.Context, appName string, options metav1.GetOptions) (result *v1.AppCredentials, err error) {
	emptyResult := &v1.AppCredentials{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "credentials", appName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.AppCredentials), err
}
