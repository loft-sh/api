// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	managementv1 "github.com/loft-sh/api/v4/pkg/clientset/versioned/typed/management/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeProjects implements ProjectInterface
type fakeProjects struct {
	*gentype.FakeClientWithList[*v1.Project, *v1.ProjectList]
	Fake *FakeManagementV1
}

func newFakeProjects(fake *FakeManagementV1) managementv1.ProjectInterface {
	return &fakeProjects{
		gentype.NewFakeClientWithList[*v1.Project, *v1.ProjectList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("projects"),
			v1.SchemeGroupVersion.WithKind("Project"),
			func() *v1.Project { return &v1.Project{} },
			func() *v1.ProjectList { return &v1.ProjectList{} },
			func(dst, src *v1.ProjectList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ProjectList) []*v1.Project { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ProjectList, items []*v1.Project) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// ListMembers takes name of the project, and returns the corresponding projectMembers object, and an error if there is any.
func (c *fakeProjects) ListMembers(ctx context.Context, projectName string, options metav1.GetOptions) (result *v1.ProjectMembers, err error) {
	emptyResult := &v1.ProjectMembers{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "members", projectName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectMembers), err
}

// ListTemplates takes name of the project, and returns the corresponding projectTemplates object, and an error if there is any.
func (c *fakeProjects) ListTemplates(ctx context.Context, projectName string, options metav1.GetOptions) (result *v1.ProjectTemplates, err error) {
	emptyResult := &v1.ProjectTemplates{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "templates", projectName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectTemplates), err
}

// ListClusters takes name of the project, and returns the corresponding projectClusters object, and an error if there is any.
func (c *fakeProjects) ListClusters(ctx context.Context, projectName string, options metav1.GetOptions) (result *v1.ProjectClusters, err error) {
	emptyResult := &v1.ProjectClusters{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "clusters", projectName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectClusters), err
}

// MigrateVirtualClusterInstance takes the representation of a projectMigrateVirtualClusterInstance and creates it.  Returns the server's representation of the projectMigrateVirtualClusterInstance, and an error, if there is any.
func (c *fakeProjects) MigrateVirtualClusterInstance(ctx context.Context, projectName string, projectMigrateVirtualClusterInstance *v1.ProjectMigrateVirtualClusterInstance, opts metav1.CreateOptions) (result *v1.ProjectMigrateVirtualClusterInstance, err error) {
	emptyResult := &v1.ProjectMigrateVirtualClusterInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateSubresourceActionWithOptions(c.Resource(), projectName, "migratevirtualclusterinstance", projectMigrateVirtualClusterInstance, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectMigrateVirtualClusterInstance), err
}

// ImportSpace takes the representation of a projectImportSpace and creates it.  Returns the server's representation of the projectImportSpace, and an error, if there is any.
func (c *fakeProjects) ImportSpace(ctx context.Context, projectName string, projectImportSpace *v1.ProjectImportSpace, opts metav1.CreateOptions) (result *v1.ProjectImportSpace, err error) {
	emptyResult := &v1.ProjectImportSpace{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateSubresourceActionWithOptions(c.Resource(), projectName, "importspace", projectImportSpace, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectImportSpace), err
}

// MigrateSpaceInstance takes the representation of a projectMigrateSpaceInstance and creates it.  Returns the server's representation of the projectMigrateSpaceInstance, and an error, if there is any.
func (c *fakeProjects) MigrateSpaceInstance(ctx context.Context, projectName string, projectMigrateSpaceInstance *v1.ProjectMigrateSpaceInstance, opts metav1.CreateOptions) (result *v1.ProjectMigrateSpaceInstance, err error) {
	emptyResult := &v1.ProjectMigrateSpaceInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateSubresourceActionWithOptions(c.Resource(), projectName, "migratespaceinstance", projectMigrateSpaceInstance, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ProjectMigrateSpaceInstance), err
}
