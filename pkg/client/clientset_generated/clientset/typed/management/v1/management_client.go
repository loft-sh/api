// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/loft-sh/api/v2/pkg/apis/management/v1"
	"github.com/loft-sh/api/v2/pkg/client/clientset_generated/clientset/scheme"
	rest "k8s.io/client-go/rest"
)

type ManagementV1Interface interface {
	RESTClient() rest.Interface
	AnnouncementsGetter
	AppsGetter
	ClustersGetter
	ClusterAccessesGetter
	ClusterAccountTemplatesGetter
	ClusterConnectsGetter
	ClusterRoleTemplatesGetter
	ConfigsGetter
	DirectClusterEndpointTokensGetter
	EventsGetter
	FeaturesGetter
	LicensesGetter
	LicenseTokensGetter
	LoftUpgradesGetter
	OwnedAccessKeysGetter
	PolicyViolationsGetter
	ResetAccessKeysGetter
	SelvesGetter
	SelfSubjectAccessReviewsGetter
	SharedSecretsGetter
	SpaceConstraintsGetter
	SpaceTemplatesGetter
	SubjectAccessReviewsGetter
	TasksGetter
	TeamsGetter
	UsersGetter
	VirtualClusterTemplatesGetter
}

// ManagementV1Client is used to interact with features provided by the management.loft.sh group.
type ManagementV1Client struct {
	restClient rest.Interface
}

func (c *ManagementV1Client) Announcements() AnnouncementInterface {
	return newAnnouncements(c)
}

func (c *ManagementV1Client) Apps() AppInterface {
	return newApps(c)
}

func (c *ManagementV1Client) Clusters() ClusterInterface {
	return newClusters(c)
}

func (c *ManagementV1Client) ClusterAccesses() ClusterAccessInterface {
	return newClusterAccesses(c)
}

func (c *ManagementV1Client) ClusterAccountTemplates() ClusterAccountTemplateInterface {
	return newClusterAccountTemplates(c)
}

func (c *ManagementV1Client) ClusterConnects() ClusterConnectInterface {
	return newClusterConnects(c)
}

func (c *ManagementV1Client) ClusterRoleTemplates() ClusterRoleTemplateInterface {
	return newClusterRoleTemplates(c)
}

func (c *ManagementV1Client) Configs() ConfigInterface {
	return newConfigs(c)
}

func (c *ManagementV1Client) DirectClusterEndpointTokens() DirectClusterEndpointTokenInterface {
	return newDirectClusterEndpointTokens(c)
}

func (c *ManagementV1Client) Events() EventInterface {
	return newEvents(c)
}

func (c *ManagementV1Client) Features() FeatureInterface {
	return newFeatures(c)
}

func (c *ManagementV1Client) Licenses() LicenseInterface {
	return newLicenses(c)
}

func (c *ManagementV1Client) LicenseTokens() LicenseTokenInterface {
	return newLicenseTokens(c)
}

func (c *ManagementV1Client) LoftUpgrades() LoftUpgradeInterface {
	return newLoftUpgrades(c)
}

func (c *ManagementV1Client) OwnedAccessKeys() OwnedAccessKeyInterface {
	return newOwnedAccessKeys(c)
}

func (c *ManagementV1Client) PolicyViolations() PolicyViolationInterface {
	return newPolicyViolations(c)
}

func (c *ManagementV1Client) ResetAccessKeys() ResetAccessKeyInterface {
	return newResetAccessKeys(c)
}

func (c *ManagementV1Client) Selves() SelfInterface {
	return newSelves(c)
}

func (c *ManagementV1Client) SelfSubjectAccessReviews() SelfSubjectAccessReviewInterface {
	return newSelfSubjectAccessReviews(c)
}

func (c *ManagementV1Client) SharedSecrets(namespace string) SharedSecretInterface {
	return newSharedSecrets(c, namespace)
}

func (c *ManagementV1Client) SpaceConstraints() SpaceConstraintInterface {
	return newSpaceConstraints(c)
}

func (c *ManagementV1Client) SpaceTemplates() SpaceTemplateInterface {
	return newSpaceTemplates(c)
}

func (c *ManagementV1Client) SubjectAccessReviews() SubjectAccessReviewInterface {
	return newSubjectAccessReviews(c)
}

func (c *ManagementV1Client) Tasks() TaskInterface {
	return newTasks(c)
}

func (c *ManagementV1Client) Teams() TeamInterface {
	return newTeams(c)
}

func (c *ManagementV1Client) Users() UserInterface {
	return newUsers(c)
}

func (c *ManagementV1Client) VirtualClusterTemplates() VirtualClusterTemplateInterface {
	return newVirtualClusterTemplates(c)
}

// NewForConfig creates a new ManagementV1Client for the given config.
func NewForConfig(c *rest.Config) (*ManagementV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &ManagementV1Client{client}, nil
}

// NewForConfigOrDie creates a new ManagementV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *ManagementV1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new ManagementV1Client for the given RESTClient.
func New(c rest.Interface) *ManagementV1Client {
	return &ManagementV1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *ManagementV1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
