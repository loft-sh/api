// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	managementv1 "github.com/loft-sh/api/v3/pkg/apis/management/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeLicenses implements LicenseInterface
type FakeLicenses struct {
	Fake *FakeManagementV1
}

var licensesResource = schema.GroupVersionResource{Group: "management.loft.sh", Version: "v1", Resource: "licenses"}

var licensesKind = schema.GroupVersionKind{Group: "management.loft.sh", Version: "v1", Kind: "License"}

// Get takes name of the license, and returns the corresponding license object, and an error if there is any.
func (c *FakeLicenses) Get(ctx context.Context, name string, options v1.GetOptions) (result *managementv1.License, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(licensesResource, name), &managementv1.License{})
	if obj == nil {
		return nil, err
	}
	return obj.(*managementv1.License), err
}

// List takes label and field selectors, and returns the list of Licenses that match those selectors.
func (c *FakeLicenses) List(ctx context.Context, opts v1.ListOptions) (result *managementv1.LicenseList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(licensesResource, licensesKind, opts), &managementv1.LicenseList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &managementv1.LicenseList{ListMeta: obj.(*managementv1.LicenseList).ListMeta}
	for _, item := range obj.(*managementv1.LicenseList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested licenses.
func (c *FakeLicenses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(licensesResource, opts))
}

// Create takes the representation of a license and creates it.  Returns the server's representation of the license, and an error, if there is any.
func (c *FakeLicenses) Create(ctx context.Context, license *managementv1.License, opts v1.CreateOptions) (result *managementv1.License, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(licensesResource, license), &managementv1.License{})
	if obj == nil {
		return nil, err
	}
	return obj.(*managementv1.License), err
}

// Update takes the representation of a license and updates it. Returns the server's representation of the license, and an error, if there is any.
func (c *FakeLicenses) Update(ctx context.Context, license *managementv1.License, opts v1.UpdateOptions) (result *managementv1.License, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(licensesResource, license), &managementv1.License{})
	if obj == nil {
		return nil, err
	}
	return obj.(*managementv1.License), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeLicenses) UpdateStatus(ctx context.Context, license *managementv1.License, opts v1.UpdateOptions) (*managementv1.License, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(licensesResource, "status", license), &managementv1.License{})
	if obj == nil {
		return nil, err
	}
	return obj.(*managementv1.License), err
}

// Delete takes name of the license and deletes it. Returns an error if one occurs.
func (c *FakeLicenses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(licensesResource, name, opts), &managementv1.License{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLicenses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(licensesResource, listOpts)

	_, err := c.Fake.Invokes(action, &managementv1.LicenseList{})
	return err
}

// Patch applies the patch and returns the patched license.
func (c *FakeLicenses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *managementv1.License, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(licensesResource, name, pt, data, subresources...), &managementv1.License{})
	if obj == nil {
		return nil, err
	}
	return obj.(*managementv1.License), err
}
